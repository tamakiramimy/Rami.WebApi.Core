<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rami.WebApi.Core.Web</name>
    </assembly>
    <members>
        <member name="T:Rami.WebApi.Core.Web.Code.CacheAOPbase">
            <summary>
            Aop拦截基类
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CacheAOPbase.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            AOP的拦截方法
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CacheAOPbase.CustomCacheKey(Castle.DynamicProxy.IInvocation)">
            <summary>
            自定义缓存的key
            </summary>
            <param name="invocation"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CacheAOPbase.GetArgumentValue(System.Object)">
            <summary>
            object 转 string
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.LogAOP">
            <summary>
            日志拦截
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.LogAOP._hubContext">
            <summary>
            异常日志通知Hub
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.LogAOP._logHelper">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.LogAOP.#ctor(Microsoft.AspNetCore.SignalR.IHubContext{Rami.WebApi.Core.Framework.ChatHub},Rami.WebApi.Core.Framework.ILogHelper{Rami.WebApi.Core.Web.Code.LogAOP})">
            <summary>
            构造方法
            </summary>
            <param name="hubContext"></param>
            <param name="logHelper"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.LogAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实例化IInterceptor唯一方法 
            </summary>
            <param name="invocation">包含被拦截方法的信息</param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.LogAOP.TestActionAsync(Castle.DynamicProxy.IInvocation)">
            <summary>
            
            </summary>
            <param name="invocation"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.LogAOP.LogEx(System.Exception,System.String@)">
            <summary>
            记录异常日志
            </summary>
            <param name="ex"></param>
            <param name="dataIntercept"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.LogAOP.IsAsyncMethod(System.Reflection.MethodInfo)">
            <summary>
            判断是否异步方法
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.InternalAsyncHelper">
            <summary>
            异步方法拦截帮助类
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.InternalAsyncHelper.AwaitTaskWithPostActionAndFinally(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task},System.Action{System.Exception})">
            <summary>
            异步方法执行，插入Post自定义方法，并记录异常
            </summary>
            <param name="actualReturnValue"></param>
            <param name="postAction"></param>
            <param name="finalAction"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.InternalAsyncHelper.AwaitTaskWithPostActionAndFinallyAndGetResult``1(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task},System.Action{System.Exception})">
            <summary>
            泛型异步方法执行，插入Post自定义方法，并记录异常
            </summary>
            <typeparam name="T"></typeparam>
            <param name="actualReturnValue"></param>
            <param name="postAction"></param>
            <param name="finalAction"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.InternalAsyncHelper.CallAwaitTaskWithPostActionAndFinallyAndGetResult(System.Type,System.Object,System.Func{System.Threading.Tasks.Task},System.Action{System.Exception})">
            <summary>
            异步泛型方法执行并返回，记录错误日志
            </summary>
            <param name="taskReturnType"></param>
            <param name="actualReturnValue"></param>
            <param name="action"></param>
            <param name="finalAction"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.MemCacheAOP">
            <summary>
            MemoryCaching缓存AOP
            使用方法：配置Appsetting启用MemoryCaching缓存，并且在需要缓存的方法添加CachingAttribute属性，设置缓存时间（分钟）
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.MemCacheAOP._cache">
            <summary>
            通过注入的方式，把缓存操作接口通过构造函数注入
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.MemCacheAOP.#ctor(Rami.WebApi.Core.Framework.ICaching)">
            <summary>
            构造方法
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.MemCacheAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercept方法是拦截的关键所在，也是IInterceptor接口中的唯一定义
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.RedisCacheAOP">
            <summary>
            Redis缓存AOP
            使用方法：配置Appsetting启用Redis缓存，并且在需要缓存的方法添加CachingAttribute属性，设置缓存时间（分钟）
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.RedisCacheAOP._cache">
            <summary>
            通过注入的方式，把缓存操作接口通过构造函数注入
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.RedisCacheAOP.#ctor(Rami.WebApi.Core.Framework.IRedisCacheManager)">
            <summary>
            构造方法
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.RedisCacheAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercept方法是拦截的关键所在，也是IInterceptor接口中的唯一定义
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.AuthHelper">
            <summary>
            Jwt签名、解析帮助类
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.AuthHelper.CookieAuthScheme">
            <summary>
            Cookie认证
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.AuthHelper.CookieAuthName">
            <summary>
            Cookie认证Cookie名称
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.AuthHelper.JwtAuthScheme">
            <summary>
            Jwt认证
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.AuthHelper.JwtAuthName">
            <summary>
            Jwt认证Cookie名称
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.AuthHelper.Id4OidcScheme">
            <summary>
            Id4 Oidc认证
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.AuthHelper.GetJwtToken(Rami.WebApi.Core.Web.Code.TokenModelJwt)">
            <summary>
            生成JwtToken
            </summary>
            <param name="tokenModel"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.AuthHelper.GetJwtClaim(Rami.WebApi.Core.Web.Code.TokenModelJwt,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            获取Jwt Claims
            </summary>
            <param name="tokenModel"></param>
            <param name="iss"></param>
            <param name="aud"></param>
            <param name="overSec"></param>
            <param name="dtNow"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.AuthHelper.DecryptJwtToken(System.String)">
            <summary>
            解析JwtToken
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.AuthHelper.IdentifyLogin(System.Collections.Generic.List{System.Security.Claims.Claim})">
            <summary>
            保存用户信息到HttpContext.User
            </summary>
            <param name="claims"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.AuthHelper.IdentifyLogout">
            <summary>
            认证登出
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.TokenModelJwt">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.TokenModelJwt.Uid">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.TokenModelJwt.UserName">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.TokenModelJwt.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.TokenModelJwt.Work">
            <summary>
            职能
            </summary>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.LoginParam">
            <summary>
            登录参数
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.LoginParam.Token">
            <summary>
            JwtToken
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.LoginParam.UserName">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.LoginParam.ExpiresIn">
            <summary>
            超时秒数
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.LoginParam.ExpireTimeStamp">
            <summary>
            超时时间戳
            </summary>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.JwtTokenAuth">
            <summary>
            中间件
            原做为自定义授权中间件
            现做检查 header token的使用
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.JwtTokenAuth._next">
            <summary>
            下一请求
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.JwtTokenAuth._logHelper">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.JwtTokenAuth.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Rami.WebApi.Core.Framework.ILogHelper{Rami.WebApi.Core.Web.Code.JwtTokenAuth})">
            <summary>
            构造方法
            </summary>
            <param name="next"></param>
            <param name="logHelper"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.JwtTokenAuth.PreProceed(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            请求预处理
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.JwtTokenAuth.PostProceed(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            处理请求
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.JwtTokenAuth.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            验证Jwt授权
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.ApiAuthorize">
            <summary>
            API授权(Cookies)
            配合ApiAuthorizeHandlerSimple使用，可以让所有API都执行OnAuthorization验证
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.ApiAuthorize.AuthenticationSchemes">
            <summary>
            Scheme认证（多个可以用，隔开）
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.ApiAuthorize.Policy">
            <summary>
            策略认证（多个可以用，隔开）
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.ApiAuthorize.Roles">
            <summary>
            角色认证（多个可以用，隔开）
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.ApiAuthorize.RoleList">
            <summary>
            角色认证（重写）
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.ApiAuthorize.currentUser">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.ApiAuthorize.OnAuthorization(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
            <summary>
            授权判断
            配合ApiAuthorizeHandlerSimple使用，可以让所有API都执行OnAuthorization验证
            PS:只有不需要授权的方法才会进来，需要授权的都会被拦截跳转到StartUp注册的LoginPath，授权成功后才会进来这里。。。
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.ApiAuthorizeHandlerSimple">
            <summary>
            配合Cookies 认证使用
            允许所有API进入ApiAuthorize的OnAuthorization，不拦截没授权的请求
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.ApiAuthorizeHandlerSimple.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Rami.WebApi.Core.Web.Code.ApiAuthorizeHandlerSimple)">
            <summary>
            允许所有API进入ApiAuthorize的OnAuthorization，不拦截没授权的请求
            </summary>
            <param name="context"></param>
            <param name="requirement"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.ApiAuthorizeHandlerReq">
            <summary>
            API授权请求资源
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.ApiAuthorizeHandlerReq.Roles">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.ApiAuthorizeHandlerReq.Issuer">
            <summary>
            Jwt发行人
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.ApiAuthorizeHandlerReq.Audience">
            <summary>
            Jwt订阅人
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.ApiAuthorizeHandlerReq.Expiration">
            <summary>
            Jwt过期时间
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.ApiAuthorizeHandlerReq.SigningCredentials">
            <summary>
            Jwt签名验证
            </summary>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.ApiAuthorizeHandler">
            <summary>
            API授权处理
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.ApiAuthorizeHandler.Schemes">
            <summary>
            IAuthenticationSchemeProvider
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.ApiAuthorizeHandler.Repository">
            <summary>
            IRepository
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.ApiAuthorizeHandler.HttpContextAccessor">
            <summary>
            IHttpContextAccessor
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.ApiAuthorizeHandler.LogHelper">
            <summary>
            ILogHelper
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.ApiAuthorizeHandler.#ctor(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider,Rami.WebApi.Core.Framework.IRepository,Microsoft.AspNetCore.Http.IHttpContextAccessor,Rami.WebApi.Core.Framework.ILogHelper{Rami.WebApi.Core.Web.Code.ApiAuthorizeHandler})">
            <summary>
            构造方法
            </summary>
            <param name="schemes"></param>
            <param name="repository"></param>
            <param name="httpContextAccessor"></param>
            <param name="logHelper"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.ApiAuthorizeHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Rami.WebApi.Core.Web.Code.ApiAuthorizeHandlerReq)">
            <summary>
            判断是否授权
            </summary>
            <param name="context"></param>
            <param name="requirement"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.ApiAuthorizeHandler.AuthDeal(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Rami.WebApi.Core.Web.Code.ApiAuthorizeHandlerReq,Microsoft.AspNetCore.Http.HttpContext,System.Boolean)">
            <summary>
            处理授权结果
            </summary>
            <param name="context"></param>
            <param name="requirement"></param>
            <param name="httpContext"></param>
            <param name="isAuth"></param>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.AuthConst">
            <summary>
            授权定义
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.AuthConst.MvcAuthSimple">
            <summary>
            Mvc授权-简单
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.AuthConst.MvcAuthReq">
            <summary>
            Mvc授权
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.AuthConst.MvcAuthReqAdmin">
            <summary>
            Mvc授权(跳转界面为/Admin/Login、角色要求Admin)
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.AuthConst.ApiAuthSimple">
            <summary>
            API授权-简单
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.AuthConst.ApiAuthReq">
            <summary>
            API授权
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.AuthConst.ApiAuthReqAdmin">
            <summary>
            API授权（角色要求Admin，验证JWT颁发者）
            </summary>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.CurrentUser">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.CurrentUser.logHelper">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.CurrentUser.repo">
            <summary>
            服务
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.CurrentUser.appUser">
            <summary>
            全局用户
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.CurrentUser.cache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.CurrentUser.adHelper">
            <summary>
            Ad域认证
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CurrentUser.#ctor(Rami.WebApi.Core.Framework.ILogHelper{Rami.WebApi.Core.Web.Code.CurrentUser},Rami.WebApi.Core.Framework.IRepository,Rami.WebApi.Core.Framework.IUser,Rami.WebApi.Core.Service.ICacheHelper,Rami.WebApi.Core.Framework.LdapHelper)">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CurrentUser.Login(Rami.WebApi.Core.Domain.LoginModel)">
            <summary>
            登陆
            </summary>
            <param name="login"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CurrentUser.Logout">
            <summary>
            退出登录
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.CurrentUser.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.CurrentUser.LstUserRoles">
            <summary>
            角色列表
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.CurrentUser.CurUser">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.CurrentUser.UserRolesStr">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.CurrentUser.UserIcon">
            <summary>
            用户头像
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CurrentUser.IsHasRole(System.String)">
            <summary>
            判断用户是否包含角色
            </summary>
            <param name="strRoles"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CurrentUser.IsHasRole(Rami.WebApi.Core.Domain.EnumSysRoles[])">
            <summary>
            是否有权限
            </summary>
            <param name="lstRoles"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CurrentUser.IsHasRole(System.String[])">
            <summary>
            判断用户是否包含角色
            </summary>
            <param name="lstRoles"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.MvcAuthorize">
            <summary>
            MVC授权认证
            配合MvcAuthrizeHandlerSimple使用，可以让所有Action都执行OnAuthorization验证
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.MvcAuthorize.AuthenticationSchemes">
            <summary>
            Scheme认证（多个可以用，隔开）
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.MvcAuthorize.Policy">
            <summary>
            策略认证（多个可以用，隔开）
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.MvcAuthorize.Roles">
            <summary>
            角色认证（多个可以用，隔开）
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.MvcAuthorize.RoleList">
            <summary>
            角色认证（重写）
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.MvcAuthorize.RedirUrl">
            <summary>
            授权失败跳转授权界面(无效，因为netcore未授权默认会跳转到StartUp配置的LoginPath)
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.MvcAuthorize.currentUser">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.MvcAuthorize.OnAuthorization(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
            <summary>
            授权判断
            配合MvcAuthrizeHandlerSimple使用，可以让所有Action都执行OnAuthorization验证
            PS:只有不需要授权的方法才会进来，需要授权的都会被拦截跳转到StartUp注册的LoginPath，授权成功后才会进来这里。。。
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.MvcAuthorizeHandlerSimple">
            <summary>
            配合Cookies 认证使用
            允许所有Mvc进入MvcAuthorize的OnAuthorization，不拦截没授权的请求
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.MvcAuthorizeHandlerSimple.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Rami.WebApi.Core.Web.Code.MvcAuthorizeHandlerSimple)">
            <summary>
            允许所有Mvc进入MvcAuthorize的OnAuthorization
            </summary>
            <param name="context"></param>
            <param name="requirement"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.MvcRoleUrlPermissions">
            <summary>
            Mvc 角色路由配置
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.MvcRoleUrlPermissions.Role">
            <summary>
            用户或角色或其他凭据名称
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.MvcRoleUrlPermissions.Url">
            <summary>
            请求Url
            </summary>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.MvcAuthorizeHandlerReq">
            <summary>
            Mvc授权请求资源
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.MvcAuthorizeHandlerReq.Roles">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.MvcAuthorizeHandlerReq.Permissions">
            <summary>
            用户权限集合，一个订单包含了很多详情，
            同理，一个网站的认证发行中，也有很多权限详情(这里是Role和URL的关系)
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.MvcAuthorizeHandlerReq.ClaimType">
            <summary>
            认证授权类型
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.MvcAuthorizeHandlerReq.LoginPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.MvcAuthorizeHandlerReq.DeniedAction">
            <summary>
            无权限action
            </summary>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.MvcAuthorizeHandler">
            <summary>
            Mvc授权处理
            单独Jwt认证使用（缺点：Mvc的Action返回都会执行一次后，才会触发跳转）
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.MvcAuthorizeHandler.Schemes">
            <summary>
            IAuthenticationSchemeProvider
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.MvcAuthorizeHandler.Repository">
            <summary>
            IRepository
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.MvcAuthorizeHandler.HttpContextAccessor">
            <summary>
            IHttpContextAccessor
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.MvcAuthorizeHandler.LogHelper">
            <summary>
            ILogHelper
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.MvcAuthorizeHandler.#ctor(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider,Rami.WebApi.Core.Framework.IRepository,Microsoft.AspNetCore.Http.IHttpContextAccessor,Rami.WebApi.Core.Framework.ILogHelper{Rami.WebApi.Core.Web.Code.ApiAuthorizeHandler})">
            <summary>
            构造方法
            </summary>
            <param name="schemes"></param>
            <param name="repository"></param>
            <param name="httpContextAccessor"></param>
            <param name="logHelper"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.MvcAuthorizeHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Rami.WebApi.Core.Web.Code.MvcAuthorizeHandlerReq)">
            <summary>
            判断是否授权
            </summary>
            <param name="context"></param>
            <param name="requirement"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.MvcAuthorizeHandler.AuthDeal(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Rami.WebApi.Core.Web.Code.MvcAuthorizeHandlerReq,Microsoft.AspNetCore.Http.HttpContext,System.Boolean)">
            <summary>
            处理授权结果
            </summary>
            <param name="context"></param>
            <param name="requirement"></param>
            <param name="httpContext"></param>
            <param name="isAuth"></param>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.AuthorizationService">
            <summary>
            AuthorizationService
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.AuthorizationService.AddAuthorizationService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            AddAuthorizationService
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.AutofacServiceExtensions">
            <summary>
            AutofacService
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.AutofacServiceExtensions.AutofacConfigure(Autofac.ContainerBuilder)">
            <summary>
            AutofacConfigure
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.AutofacServiceExtensions.RegisterServices(Autofac.ContainerBuilder)">
            <summary>
            RegisterServices
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.AutofacServiceContainer">
            <summary>
            静态Autofac IocManager
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.AutofacServiceContainer.Load(Autofac.ContainerBuilder)">
            <summary>
            注册服务
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.ControllersWithViewsService">
            <summary>
            ControllersWithViewsService
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.ControllersWithViewsService.AddControllersWithViewsService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            AddControllersWithViewsService
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.CookiesAuthService">
            <summary>
            CookiesAuthService
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CookiesAuthService.AddCookiesAuthService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            AddAuthorizationService
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CookiesAuthService.OnValidatePrincipal">
            <summary>
            OnValidatePrincipal
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CookiesAuthService.OnSigningOut">
            <summary>
            OnSigningOut
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CookiesAuthService.OnSigningIn">
            <summary>
            OnSigningIn
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CookiesAuthService.OnSignedIn">
            <summary>
            OnSignedIn
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CookiesAuthService.OnRedirectToLogout">
            <summary>
            OnRedirectToLogout
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CookiesAuthService.OnRedirectToReturnUrl">
            <summary>
            RedirectContext
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CookiesAuthService.OnRedirectToAccessDenied">
            <summary>
            OnRedirectToAccessDenied
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CookiesAuthService.OnRedirectToLogin">
            <summary>
            OnRedirectToLogin
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.CustomCookieAuthEvent">
            <summary>
            自定义
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CustomCookieAuthEvent.RedirectToAccessDenied(Microsoft.AspNetCore.Authentication.RedirectContext{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})">
            <summary>
            RedirectToAccessDenied
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CustomCookieAuthEvent.RedirectToLogin(Microsoft.AspNetCore.Authentication.RedirectContext{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})">
            <summary>
            RedirectToLogin
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CustomCookieAuthEvent.RedirectToLogout(Microsoft.AspNetCore.Authentication.RedirectContext{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})">
            <summary>
            RedirectToLogout
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CustomCookieAuthEvent.RedirectToReturnUrl(Microsoft.AspNetCore.Authentication.RedirectContext{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})">
            <summary>
            RedirectToReturnUrl
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CustomCookieAuthEvent.SignedIn(Microsoft.AspNetCore.Authentication.Cookies.CookieSignedInContext)">
            <summary>
            SignedIn
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CustomCookieAuthEvent.SigningIn(Microsoft.AspNetCore.Authentication.Cookies.CookieSigningInContext)">
            <summary>
            SigningIn
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CustomCookieAuthEvent.SigningOut(Microsoft.AspNetCore.Authentication.Cookies.CookieSigningOutContext)">
            <summary>
            SigningOut
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CustomCookieAuthEvent.ValidatePrincipal(Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext)">
            <summary>
            ValidatePrincipal
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.CorsService">
            <summary>
            Cors
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CorsService.AddCorsService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            AddAuthorizationService
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.Id4OidcService">
            <summary>
            Id4 Oidc认证
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.Id4OidcService.AddId4OidcService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            配置服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.Id4OidcService.OnAuthenticationFailed">
            <summary>
            OnAuthenticationFailed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.Id4OidcService.OnAuthorizationCodeReceived">
            <summary>
            OnAuthorizationCodeReceived
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.Id4OidcService.OnMessageReceived">
            <summary>
            OnMessageReceived
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.Id4OidcService.OnRedirectToIdentityProvider">
            <summary>
            OnRedirectToIdentityProvider
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.Id4OidcService.OnRedirectToIdentityProviderForSignOut">
            <summary>
            OnRedirectToIdentityProviderForSignOut
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.Id4OidcService.OnSignedOutCallbackRedirect">
            <summary>
            OnSignedOutCallbackRedirect
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.Id4OidcService.OnRemoteSignOut">
            <summary>
            OnRemoteSignOut
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.Id4OidcService.OnTokenResponseReceived">
            <summary>
            OnTokenResponseReceived
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.Id4OidcService.OnTokenValidated">
            <summary>
            OnTokenValidated
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.Id4OidcService.OnUserInformationReceived">
            <summary>
            OnUserInformationReceived
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.JwtAuthServiceExtensions">
            <summary>
            JwtAuthService
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.JwtAuthServiceExtensions.AddJwtAuthService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            配置服务
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.JwtAuthServiceExtensions.GetTokenValidationParameters(Microsoft.Extensions.Configuration.IConfigurationSection,Microsoft.IdentityModel.Tokens.SymmetricSecurityKey)">
            <summary>
            Jwt颁发参数
            </summary>
            <param name="audienceConfig"></param>
            <param name="signingKey"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.JwtAuthServiceExtensions.OnMessageReceived">
            <summary>
            OnMessageReceived
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.JwtAuthServiceExtensions.OnTokenValidated">
            <summary>
            OnTokenValidated
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.JwtAuthServiceExtensions.OnChallenge">
            <summary>
            OnChallenge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.JwtAuthServiceExtensions.OnForbidden">
            <summary>
            OnForbidden
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.JwtAuthServiceExtensions.OnAuthenticationFailed">
            <summary>
            OnAuthenticationFailed
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.ApiResponseHandler">
            <summary>
            API响应处理
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.ApiResponseHandler.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions},Microsoft.Extensions.Logging.ILoggerFactory,System.Text.Encodings.Web.UrlEncoder,Microsoft.AspNetCore.Authentication.ISystemClock)">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
            <param name="logger"></param>
            <param name="encoder"></param>
            <param name="clock"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.ApiResponseHandler.HandleAuthenticateAsync">
            <summary>
            授权处理
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.ApiResponseHandler.HandleChallengeAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            401 处理
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.ApiResponseHandler.HandleForbiddenAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            403 处理
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.ApiResponse">
            <summary>
            API响应
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.ApiResponse.Status">
            <summary>
            404状态吗
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.ApiResponse.Value">
            <summary>
            404提示
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.ApiResponse.#ctor(Rami.WebApi.Core.Web.Code.StatusCode)">
            <summary>
            API响应
            </summary>
            <param name="apiCode"></param>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.StatusCode">
            <summary>
            Http状态
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.StatusCode.CODE401">
            <summary>
            401：未授权
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.StatusCode.CODE403">
            <summary>
            403：无权限
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.StatusCode.CODE404">
            <summary>
            404：不存在
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.StatusCode.CODE500">
            <summary>
            500：服务端错误
            </summary>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.Log4Service">
            <summary>
            Log4日志
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.Log4Service.AddLog4Service(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            AddLog4Service
            </summary>
            <param name="services"></param>
            <param name="conf"></param>
            <param name="env"></param>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.MemoryCacheService">
            <summary>
            Memory缓存
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.MemoryCacheService.AddMemoryCacheService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            AddMemoryCacheService
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.MiniProfilerService">
            <summary>
            MiniProfilerService
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.MiniProfilerService.AddMiniProfilerService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            AddMiniProfilerService
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.SwaggerServiceExtensions">
            <summary>
            Swagger服务
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.SwaggerServiceExtensions.ApiName">
            <summary>
            API名称
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.SwaggerServiceExtensions.AddSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            配置服务
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.SwaggerServiceExtensions.UserSwaggerService(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用服务
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.GlobalExceptionsFilter">
            <summary>
            全局异常日志
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.GlobalExceptionsFilter._env">
            <summary>
            环境变量
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.GlobalExceptionsFilter._loggerHelper">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.GlobalExceptionsFilter._hubContext">
            <summary>
            异常通知Hub
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.GlobalExceptionsFilter.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Rami.WebApi.Core.Framework.ILogHelper{Rami.WebApi.Core.Web.Code.GlobalExceptionsFilter},Microsoft.AspNetCore.SignalR.IHubContext{Rami.WebApi.Core.Framework.ChatHub})">
            <summary>
            构造函数
            </summary>
            <param name="env"></param>
            <param name="loggerHelper"></param>
            <param name="hubContext"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.GlobalExceptionsFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常处理
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.GlobalExceptionsFilter.WriteLog(System.String,System.Exception)">
            <summary>
            自定义返回格式
            </summary>
            <param name="throwMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.InternalServerErrorObjectResult">
            <summary>
            系统内部错误
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.InternalServerErrorObjectResult.#ctor(System.Object)">
            <summary>
            系统内部错误
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.JsonErrorResponse">
            <summary>
            返回错误信息
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.JsonErrorResponse.Message">
            <summary>
            生产环境的消息
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.JsonErrorResponse.DevelopmentMessage">
            <summary>
            开发环境的消息
            </summary>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.GlobalRouteAuthorizeConvention">
            <summary>
            Summary:全局路由权限公约
            Remarks:目的是针对不同的路由，采用不同的授权过滤器
            如果 controller 上不加 [Authorize] 特性，默认都是 Permission 策略
            否则，如果想特例其他授权机制的话，需要在 controller 上带上  [Authorize]，然后再action上自定义授权即可，比如 [Authorize(Roles = "Admin")]
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.GlobalRouteAuthorizeConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)">
            <summary>
            
            </summary>
            <param name="application"></param>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.GlobalAuthorizeFilter">
            <summary>
            全局权限过滤器【无效】
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.GlobalAuthorizeFilter.OnAuthorizationAsync(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.Permissions">
            <summary>
            权限变量配置
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.Permissions.Name">
            <summary>
            授权名称
            </summary>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.GlobalRoutePrefixFilter">
            <summary>
            全局路由前缀公约
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.GlobalRoutePrefixFilter._centralPrefix">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.GlobalRoutePrefixFilter.#ctor(Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)">
            <summary>
            
            </summary>
            <param name="routeTemplateProvider"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.GlobalRoutePrefixFilter.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)">
            <summary>
            接口的Apply方法
            </summary>
            <param name="application"></param>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.RoutePrefix">
            <summary>
            路由变量前缀配置
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.RoutePrefix.Name">
            <summary>
            前缀名
            如果不需要，尽量留空，不要修改
            除非一定要在所有的 api 前统一加上特定前缀
            </summary>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.ComBll">
            <summary>
            公用业务
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.ComBll.works">
            <summary>
            服务
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.ComBll.currentUser">
            <summary>
            用户
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.ComBll.#ctor(Rami.WebApi.Core.Framework.IRepository,Rami.WebApi.Core.Web.Code.CurrentUser)">
            <summary>
            构造函数
            </summary>
            <param name="works"></param>
            <param name="currentUser"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.ComBll.CommSave``1(``0)">
            <summary>
            通用保存
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.ComBll.CommUpd``1(``0)">
            <summary>
            通用更新方法
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.TreeHelper">
            <summary>
            树帮助类
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.TreeHelper.LoopNaviBarAppendChildren(System.Collections.Generic.List{Rami.WebApi.Core.Domain.NavigationBar},Rami.WebApi.Core.Domain.NavigationBar)">
            <summary>
            递归生成树
            </summary>
            <param name="lstAllNode"></param>
            <param name="curNode"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.TreeHelper.LoopMenuTreeAppendChildren(System.Collections.Generic.List{Rami.WebApi.Core.Domain.PermissionTree},Rami.WebApi.Core.Domain.PermissionTree)">
            <summary>
            菜单树
            </summary>
            <param name="lstAllNode"></param>
            <param name="curNode"></param>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.MiddlewareHelpers">
            <summary>
            中间件帮助类
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.MiddlewareHelpers.UseJwtTokenAuth(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Jwt验证
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.MiddlewareHelpers.UseReuestResponseLog(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            API请求响应日志
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.RequRespLogMildd">
            <summary>
            中间件
            记录请求和响应数据
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.RequRespLogMildd._next">
            <summary>
            下一个请求
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.RequRespLogMildd._logHelper">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.RequRespLogMildd.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Rami.WebApi.Core.Framework.ILogHelper{Rami.WebApi.Core.Web.Code.RequRespLogMildd})">
            <summary>
            构造方法
            </summary>
            <param name="next"></param>
            <param name="logHelper"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.RequRespLogMildd.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            处理请求
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.RequRespLogMildd.RequestDataLog(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            请求日志
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.RequRespLogMildd.ResponseDataLog(Microsoft.AspNetCore.Http.HttpResponse,System.IO.MemoryStream)">
            <summary>
            响应日志
            </summary>
            <param name="response"></param>
            <param name="ms"></param>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.SugarDbSeed">
            <summary>
             还原数据库
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.SugarDbSeed.works">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.SugarDbSeed.#ctor(Rami.WebApi.Core.Framework.IRepository)">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.SugarDbSeed.SeedAsync">
            <summary>
            异步添加种子数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.SugarDbSeed.InitDatas">
            <summary>
            初始化数据
            </summary>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.CustomApiVersion">
            <summary>
            自定义版本
            </summary>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.CustomApiVersion.ApiVersions">
            <summary>
            Api接口版本 自定义
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.CustomApiVersion.ApiVersions.V1">
            <summary>
            V1 版本
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Code.CustomApiVersion.ApiVersions.V2">
            <summary>
            V2 版本
            </summary>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Code.CustomRouteAttribute">
            <summary>
            自定义路由 /api/{version}/[controler]/[action]
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Code.CustomRouteAttribute.GroupName">
            <summary>
            分组名称,是来实现接口 IApiDescriptionGroupNameProvider
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CustomRouteAttribute.#ctor(System.String)">
            <summary>
            自定义路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Code.CustomRouteAttribute.#ctor(Rami.WebApi.Core.Web.Code.CustomApiVersion.ApiVersions,System.String)">
            <summary>
            自定义版本+路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
            <param name="version"></param>
        </member>
        <member name="T:Rami.WebApi.Core.Web.ControllersAPI.BaseConfController">
            <summary>
            通用配置API
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.BaseConfController.repo">
            <summary>
            服务
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.BaseConfController.logHelper">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.BaseConfController.currentUser">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.BaseConfController.#ctor(Rami.WebApi.Core.Framework.IRepository,Rami.WebApi.Core.Framework.ILogHelper{Rami.WebApi.Core.Web.ControllersAPI.BaseConfController},Rami.WebApi.Core.Web.Code.CurrentUser)">
            <summary>
            构造方法
            </summary>
            <param name="repo"></param>
            <param name="logHelper"></param>
            <param name="currentUser"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.BaseConfController.GetDbConfigs(Rami.WebApi.Core.Framework.Para{Rami.WebApi.Core.Domain.DbConfig})">
            <summary>
            获取通用配置
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.BaseConfController.SaveDbConfig(Rami.WebApi.Core.Domain.DbConfig)">
            <summary>
            保存通用配置
            </summary>
        </member>
        <member name="T:Rami.WebApi.Core.Web.ControllersAPI.BaseController">
            <summary>
            API父类
            </summary>
        </member>
        <member name="T:Rami.WebApi.Core.Web.ControllersAPI.CommController">
            <summary>
            通用API
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.CommController.LstImgFormat">
            <summary>
            需要旋转的图片后缀
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.CommController.logHelper">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.CommController.#ctor(Rami.WebApi.Core.Framework.ILogHelper{Rami.WebApi.Core.Web.ControllersAPI.CommController})">
            <summary>
            构造方法
            </summary>
            <param name="logHelper"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.CommController.Upload(System.String)">
            <summary>
            上传
            </summary>
            <param name="upType"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.CommController.GetUploadPath(System.String)">
            <summary>
            获取上传的目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.CommController.GetFilePath(Rami.WebApi.Core.Domain.UploadRes,System.String)">
            <summary>
            获取上传的文件路径
            </summary>
            <param name="upRoot"></param>
            <param name="orgFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.CommController.GetFilePathByExt(System.String)">
            <summary>
            根据文件类型获取文件路径
            </summary>
            <param name="orgFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.CommController.GetFileFinStream(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            获取文件流（图片旋转）
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.CommController.RouteImg(System.IO.Stream,System.String)">
            <summary>
            旋转图片
            </summary>
            <param name="stream"></param>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.ControllersAPI.LoginController">
            <summary>
            登陆
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.LoginController.logHelper">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.LoginController.repo">
            <summary>
            仓储
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.LoginController.cache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.LoginController.currentUser">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.LoginController.#ctor(Rami.WebApi.Core.Framework.ILogHelper{Rami.WebApi.Core.Web.ControllersAPI.LoginController},Rami.WebApi.Core.Web.Code.CurrentUser,Rami.WebApi.Core.Framework.IRepository,Rami.WebApi.Core.Service.ICacheHelper)">
            <summary>
            构造方法
            </summary>
            <param name="logHelper"></param>
            <param name="repo"></param>
            <param name="cache"></param>
            <param name="currentUser"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.LoginController.GetJwtByLogin(System.String,System.String)">
            <summary>
            登陆
            </summary>
            <param name="userName"></param>
            <param name="userPwd"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.LoginController.Logout">
            <summary>
            退出登录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.LoginController.GetJwtByRefresh(System.String)">
            <summary>
            刷新Jwt
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.LoginController.GetUserByJwt(System.String)">
            <summary>
            根据token获取用户信息
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.ControllersAPI.PermissionController">
            <summary>
            权限管理
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.works">
            <summary>
            服务
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.currentUser">
            <summary>
            用户
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.comBll">
            <summary>
            公用业务
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.cacheHelper">
            <summary>
            缓存
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.sugarDbSeed">
            <summary>
            数据库还原
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.logHelper">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.#ctor(Rami.WebApi.Core.Framework.IRepository,Rami.WebApi.Core.Web.Code.CurrentUser,Rami.WebApi.Core.Web.Code.ComBll,Rami.WebApi.Core.Service.ICacheHelper,Rami.WebApi.Core.Web.Code.SugarDbSeed,Rami.WebApi.Core.Framework.ILogHelper{Rami.WebApi.Core.Web.ControllersAPI.PermissionController})">
            <summary>
            构造函数
            </summary>
            <param name="works"></param>
            <param name="currentUser"></param>
            <param name="comBll"></param>
            <param name="cacheHelper"></param>
            <param name="sugarDbSeed"></param>
            <param name="logHelper"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.GetUsers(Rami.WebApi.Core.Framework.Para{Rami.WebApi.Core.Domain.UserInfoShow})">
            <summary>
            查询用户列表
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.SaveUser(Rami.WebApi.Core.Domain.UserInfoShow)">
            <summary>
            保存用户
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.UpdUserPwd(Rami.WebApi.Core.Domain.UserInfoShow)">
            <summary>
            更新用户密码
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.UpdRole(Rami.WebApi.Core.Domain.UserInfoShow)">
            <summary>
            更新用户状态
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.GetMenus(Rami.WebApi.Core.Framework.Para{Rami.WebApi.Core.Domain.PermMenuDto})">
            <summary>
            获取菜单列表
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.GetMenuFullPath(Rami.WebApi.Core.Framework.Pager{Rami.WebApi.Core.Domain.PermMenuDto},System.Collections.Generic.Dictionary{System.Int32,Rami.WebApi.Core.Domain.PermMenuDto})">
            <summary>
            获取树的全路径
            </summary>
            <param name="pageRes"></param>
            <param name="dicAllMenu"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.GetPermissionTree">
            <summary>
            获取菜单树
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.SaveMenu(Rami.WebApi.Core.Domain.PermMenuDto)">
            <summary>
            保存菜单
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.UpdMenu(Rami.WebApi.Core.Domain.PermMenuDto)">
            <summary>
            更新菜单状态
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.GetMenusByUser(System.String)">
            <summary>
            根据用户查询菜单
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.GetRoles(Rami.WebApi.Core.Framework.Para{Rami.WebApi.Core.Domain.PermRoleDto})">
            <summary>
            查询角色列表
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.SaveRole(Rami.WebApi.Core.Domain.PermRoleDto)">
            <summary>
            保存角色
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.UpdRole(Rami.WebApi.Core.Domain.PermRoleDto)">
            <summary>
            更新角色状态
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.GetRolesUse">
            <summary>
            获取可用角色列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.GetUserRoles(Rami.WebApi.Core.Framework.Para{Rami.WebApi.Core.Domain.PermUserRoleVto})">
            <summary>
            查询用户角色列表
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.SaveUserRole(Rami.WebApi.Core.Domain.PermUserRoleVto)">
            <summary>
            保存用户角色
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.FilterUser(System.String)">
            <summary>
            查询用户
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.GetMenusByRole(Newtonsoft.Json.Linq.JObject)">
            <summary>
            根据角色查询菜单Ids
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.SaveRoleMenus(Newtonsoft.Json.Linq.JObject)">
            <summary>
            保存角色 对应 菜单Ids
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.PermissionController.SeedData">
            <summary>
            SeedData
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.ControllersAPI.TimingJobController">
            <summary>
            定时任务
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.TimingJobController.logHelper">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.TimingJobController.autoPushSvc">
            <summary>
            自动推送服务
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.TimingJobController.#ctor(Rami.WebApi.Core.Framework.ILogHelper{Rami.WebApi.Core.Web.ControllersAPI.TimingJobController},Rami.WebApi.Core.Service.AutoPushSvc)">
            <summary>
            构造方法
            </summary>
            <param name="logHelper"></param>
            <param name="autoPushSvc"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.TimingJobController.StartSend">
            <summary>
            自动推送
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.ControllersAPI.UEditorController">
            <summary>
            UEditor API
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.UEditorController.ue">
            <summary>
            UE
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.UEditorController.#ctor(UEditorNetCore.UEditorService)">
            <summary>
            构造方法
            </summary>
            <param name="ue"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.UEditorController.DealUeAction">
            <summary>
            处理
            </summary>
        </member>
        <member name="T:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller">
            <summary>
            公众号API2
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.repo">
            <summary>
            数据服务
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.logHelper">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.currentUser">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.cacheHelper">
            <summary>
            缓存
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.#ctor(Rami.WebApi.Core.Framework.IRepository,Rami.WebApi.Core.Framework.ILogHelper{Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller},Rami.WebApi.Core.Web.Code.CurrentUser,Rami.WebApi.Core.Service.ICacheHelper)">
            <summary>
            构造方法
            </summary>
            <param name="repo"></param>
            <param name="logHelper"></param>
            <param name="currentUser"></param>
            <param name="cacheHelper"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.GetMenus">
            <summary>
            获取微信公众号菜单
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.SaveMenus(Newtonsoft.Json.Linq.JObject)">
            <summary>
            保存微信公众号菜单列表
            </summary>
            <param name="objPara"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.SyncMenus">
            <summary>
            同步微信菜单
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.GetWxKfList(Rami.WebApi.Core.Framework.Para{Rami.WebApi.Core.Domain.WxKfInfoShow})">
            <summary>
            获取微信客服列表
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.SaveWxKf(Rami.WebApi.Core.Domain.WxKfInfoShow)">
            <summary>
            更新微信客服信息
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.UpdWxKfImg(Rami.WebApi.Core.Domain.WxKfInfoShow)">
            <summary>
            更新微信客服头像
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.InviteWxKf(Rami.WebApi.Core.Domain.WxKfInfoShow)">
            <summary>
            邀请微信客服
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.DelWxKfImg(Rami.WebApi.Core.Domain.WxKfInfoShow)">
            <summary>
            删除微信客服
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.SyncWxKf(Rami.WebApi.Core.Domain.WxKfInfoShow)">
            <summary>
            同步微信客服信息
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.GetBackNews(Rami.WebApi.Core.Framework.Para{Rami.WebApi.Core.Domain.WxBackNewsShow})">
            <summary>
            获取后台图文列表
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.UpdBackNewsInfo(System.Collections.Generic.List{Rami.WebApi.Core.Domain.WxBackNewsShow})">
            <summary>
            更新图文信息
            </summary>
            <param name="lstDatas"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.UpdBackNews(Newtonsoft.Json.Linq.JObject)">
            <summary>
            更新后台图文状态
            </summary>
            <param name="objPara"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.GetBackNewsById(System.Int64)">
            <summary>
            根据Id获取后台图文
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc2Controller.SaveBackNews(Rami.WebApi.Core.Domain.WxBackNewsShow)">
            <summary>
            保存后台图文列表
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller">
            <summary>
            公众号API3
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.repo">
            <summary>
            数据服务
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.logHelper">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.currentUser">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.wxAutoKeywordHelper">
            <summary>
            关键字自动回复帮助类
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.wxAutoPushHelper">
            <summary>
            定时推送（客服消息）
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.cacheHelper">
            <summary>
            缓存
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.#ctor(Rami.WebApi.Core.Framework.IRepository,Rami.WebApi.Core.Framework.ILogHelper{Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller},Rami.WebApi.Core.Web.Code.CurrentUser,Rami.WebApi.Core.Service.WxAutoKeywordHelper,Rami.WebApi.Core.Service.ICacheHelper,Rami.WebApi.Core.Service.WxAutoPushHelper)">
            <summary>
            构造方法
            </summary>
            <param name="repo"></param>
            <param name="logHelper"></param>
            <param name="currentUser"></param>
            <param name="wxAutoKeywordHelper"></param>
            <param name="cacheHelper"></param>
            <param name="wxAutoPushHelper"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.GetAutoKeywords(Rami.WebApi.Core.Framework.Para{Rami.WebApi.Core.Domain.WxAutoKeywordShow})">
            <summary>
            获取自动回复关键字配置
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.SaveAutoKeyword(Rami.WebApi.Core.Domain.WxAutoKeywordShow)">
            <summary>
            保存自动回复关键字配置
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.PrevKeyword(Rami.WebApi.Core.Domain.WxAutoKeywordShow)">
            <summary>
            发送预览消息
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.UpdAutoKeyword(Rami.WebApi.Core.Domain.WxAutoKeywordShow)">
            <summary>
            更新关键字状态
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.GetAutoKeyDetById(System.Int32)">
            <summary>
            根据Id获取关键字详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.GetMediaInfoByTypeId(Rami.Wechat.Core.Public.PubMediaType,System.String)">
            <summary>
            根据素材类型和id获取素材下拉列表
            </summary>
            <param name="type"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.GetWxNewsById(System.String,System.Object)">
            <summary>
            根据Id获取公众号图文信息
            </summary>
            <param name="id"></param>
            <param name="lstOpts1"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.GetWxBackNewsById(System.String,System.Object)">
            <summary>
            根据Id获取后台图文信息
            </summary>
            <param name="newsIds"></param>
            <param name="lstOpts1"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.GetCountry">
            <summary>
            获取国家列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.GetChildArea(System.Int32,System.String)">
            <summary>
            根据上级获取下级省市信息失败
            </summary>
            <param name="type"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.GetAutoPushList(Rami.WebApi.Core.Framework.Para{Rami.WebApi.Core.Domain.WxAutoPushShow})">
            <summary>
            获取自动推送配置
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.SaveAutoPush(Rami.WebApi.Core.Domain.WxAutoPushShow)">
            <summary>
            保存自动推送配置
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.PrevAutoPush(Rami.WebApi.Core.Domain.WxAutoPushShow)">
            <summary>
            发送预览消息
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.UpdAutoPush(Rami.WebApi.Core.Domain.WxAutoPushShow)">
            <summary>
            更新自动推送状态
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.GetAutoPushDetById(System.Int32)">
            <summary>
            根据Id获取自动回复详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.GetWxMediaByType(System.String,System.String)">
            <summary>
            获取微信素材(非图文)
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.GetWxNewsByType(System.String)">
            <summary>
            获取微信图文素材
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.GetWxBackNews(System.String)">
            <summary>
            获取后台图文列表
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFunc3Controller.GetNewsHtml(System.String,System.String)">
            <summary>
            获取图文HTML内容
            </summary>
            <param name="type"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController">
            <summary>
            公众号API
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.repo">
            <summary>
            数据服务
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.logHelper">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.currentUser">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.#ctor(Rami.WebApi.Core.Framework.IRepository,Rami.WebApi.Core.Framework.ILogHelper{Rami.WebApi.Core.Web.ControllersAPI.WxFuncController},Rami.WebApi.Core.Web.Code.CurrentUser)">
            <summary>
            构造方法
            </summary>
            <param name="repo"></param>
            <param name="logHelper"></param>
            <param name="currentUser"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.GetMediaList(Rami.WebApi.Core.Framework.Para{Rami.WebApi.Core.Domain.WxMediaShow})">
            <summary>
            获取媒体列表
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.UpdMediaInfo(System.Collections.Generic.List{Rami.WebApi.Core.Domain.WxMediaShow})">
            <summary>
            更新素材信息
            </summary>
            <param name="lstData"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.SaveMedia(Rami.WebApi.Core.Domain.WxMediaShow)">
            <summary>
            保存永久素材
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.UpdMediaName(Rami.WebApi.Core.Domain.WxMediaShow)">
            <summary>
            更新永久素材名称
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.DelMedia(Rami.WebApi.Core.Domain.WxMediaShow)">
            <summary>
            删除永久素材
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.SyncMediaList(Newtonsoft.Json.Linq.JObject)">
            <summary>
            同步微信公众号永久素材
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.SyncMedias(Rami.Wechat.Core.Public.PubMediaType,Rami.Wechat.Core.Public.PubMeterialResult)">
            <summary>
            保存同步的素材和下载
            </summary>
            <param name="mType"></param>
            <param name="syncRes"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.DownWxMedia(System.Collections.Generic.List{Rami.WebApi.Core.Domain.WxMediaShow},Rami.Wechat.Core.Public.PubMediaType,System.String,System.String)">
            <summary>
            下载微信永久素材
            </summary>
            <param name="lstWxMedia"></param>
            <param name="mType"></param>
            <param name="virPath"></param>
            <param name="phyPath"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.GetMediaExtension(Rami.Wechat.Core.Public.PubMediaType,Rami.WebApi.Core.Domain.WxMediaShow)">
            <summary>
            获取素材的默认格式
            </summary>
            <param name="mType"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.GetNewsList(Rami.WebApi.Core.Framework.Para{Rami.WebApi.Core.Domain.WxNewsShow})">
            <summary>
            获取永久图文列表
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.GetWxNewsById(System.String)">
            <summary>
            根据媒体ID获取图文列表
            </summary>
            <param name="mId"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.GetWxImgMedias">
            <summary>
            获取所有的永久图片素材
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.SaveWxNews(Newtonsoft.Json.Linq.JObject)">
            <summary>
            保存微信图文素材
            </summary>
            <param name="objPara"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.DelWxNews(Rami.WebApi.Core.Domain.WxNewsShow)">
            <summary>
            删除永久图文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.SyncNewsList(Newtonsoft.Json.Linq.JObject)">
            <summary>
            同步永久图文列表
            </summary>
            <param name="objPara"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxFuncController.SyncWxNews(System.Collections.Generic.List{System.String},Rami.Wechat.Core.Public.PubNewsResult)">
            <summary>
            保存微信永久图文消息
            </summary>
            <param name="lstNewsIds"></param>
            <param name="syncRes"></param>
        </member>
        <member name="T:Rami.WebApi.Core.Web.ControllersAPI.WxNotifyController">
            <summary>
            微信通知API
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxNotifyController.QyCrypt">
            <summary>
            验证服务
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxNotifyController.logHelper">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxNotifyController.repo">
            <summary>
            服务
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxNotifyController.eventHandler">
            <summary>
            推送事件处理
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxNotifyController.textHandler">
            <summary>
            推送Text处理
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxNotifyController.wxAutoComResponse">
            <summary>
            微信自动通用应答
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxNotifyController.wxDbLogHelper">
            <summary>
            微信数据库日志帮助类
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.ControllersAPI.WxNotifyController.wxKfTransferHelper">
            <summary>
            微信客服转接消息帮助类
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxNotifyController.#ctor(Rami.WebApi.Core.Framework.ILogHelper{Rami.WebApi.Core.Web.ControllersAPI.WxNotifyController},Rami.WebApi.Core.Framework.IRepository,Rami.WebApi.Core.Service.WxEventHandler,Rami.WebApi.Core.Service.WxTextHandler,Rami.WebApi.Core.Service.WxAutoComResponse,Rami.WebApi.Core.Service.WxDbLogHelper,Rami.WebApi.Core.Service.WxKfTransferHelper)">
            <summary>
            构造方法
            </summary>
            <param name="logHelper"></param>
            <param name="repo"></param>
            <param name="eventHandler"></param>
            <param name="textHandler"></param>
            <param name="wxAutoComResponse"></param>
            <param name="wxDbLogHelper"></param>
            <param name="wxKfTransferHelper"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxNotifyController.HelloTest">
            <summary>
            测试
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxNotifyController.Process(System.String,System.String,System.String,System.String)">
            <summary>
            验证服务器
            </summary>
            <param name="signature"></param>
            <param name="timestamp"></param>
            <param name="nonce"></param>
            <param name="echostr"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.ControllersAPI.WxNotifyController.Process(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            微信消息推送
            </summary>
            <param name="signature"></param>
            <param name="timestamp"></param>
            <param name="nonce"></param>
            <param name="openid"></param>
            <param name="encrypt_type"></param>
            <param name="msg_signature"></param>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Program">
            <summary>
            程序入口
            </summary>
        </member>
        <member name="F:Rami.WebApi.Core.Web.Program.scheduler">
            <summary>
            任务列表
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Program.Main(System.String[])">
            <summary>
            程序入口
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Program.CreateHostBuilder(System.String[])">
            <summary>
            构建WebHost
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Program.StartScheduler(Microsoft.Extensions.Hosting.IHost)">
            <summary>
            执行定时任务
            (PS:不推荐，建议用定时服务后台管理平台，通过Webapi方式调用)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rami.WebApi.Core.Web.Startup">
            <summary>
            程序启动
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Startup.Configuration">
            <summary>
            配置注入
            </summary>
        </member>
        <member name="P:Rami.WebApi.Core.Web.Startup.Env">
            <summary>
            环境变量
            </summary>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            构造方法
            </summary>
            <param name="configuration"></param>
            <param name="env"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            把服务添加到容器
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            配置Http管道
             This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
        <member name="M:Rami.WebApi.Core.Web.Startup.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
            IOC容器
            </summary>
            <param name="builder"></param>
        </member>
    </members>
</doc>
